// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyFirstApp.data;

#nullable disable

namespace MyFirstApp.Migrations
{
    [DbContext(typeof(GraphDbContext))]
    [Migration("20231111101139_Initial Migration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyFirstApp.Models.Entities.Edge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("EdgeCost")
                        .HasColumnType("float");

                    b.Property<Guid>("EndNodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StartNodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EndNodeId");

                    b.HasIndex("StartNodeId");

                    b.ToTable("Edges");
                });

            modelBuilder.Entity("MyFirstApp.Models.Entities.Node", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EdgeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lon")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EdgeId");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("MyFirstApp.Models.Entities.Edge", b =>
                {
                    b.HasOne("MyFirstApp.Models.Entities.Node", "EndNode")
                        .WithMany()
                        .HasForeignKey("EndNodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyFirstApp.Models.Entities.Node", "StartNode")
                        .WithMany()
                        .HasForeignKey("StartNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EndNode");

                    b.Navigation("StartNode");
                });

            modelBuilder.Entity("MyFirstApp.Models.Entities.Node", b =>
                {
                    b.HasOne("MyFirstApp.Models.Entities.Edge", null)
                        .WithMany("IntermediateNodes")
                        .HasForeignKey("EdgeId");
                });

            modelBuilder.Entity("MyFirstApp.Models.Entities.Edge", b =>
                {
                    b.Navigation("IntermediateNodes");
                });
#pragma warning restore 612, 618
        }
    }
}
